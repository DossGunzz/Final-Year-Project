#include <ESP8266WiFi.h>
#include <DNSServer.h>
#include <ESP8266WebServer.h>
#include <WiFiManager.h>  
#include <Adafruit_Sensor.h>
#include <Adafruit_BME680.h>



Adafruit_BME680 bme; // I2C

float temperature;
float humidity;
float pressure;
float gasResistance;
WiFiServer server(80);


void getSensorReadings(){
  // Tell BME680 to begin measurement.
  unsigned long endTime = bme.beginReading();
  temperature = bme.temperature;
  pressure = bme.pressure / 100.0;
  humidity = bme.humidity;
  gasResistance = bme.gas_resistance / 1000.0;
}

String processor(const String& var){
  getSensorReadings();
  //Serial.println(var);
  if(var == "TEMPERATURE"){
    return String(temperature);
  }
  else if(var == "HUMIDITY"){
    return String(humidity);
  }
  else if(var == "PRESSURE"){
    return String(pressure);
  }
  else if(var == "GAS"){
    return String(gasResistance);
  }
  return String();
}

// only runs once on boot
void setup() {
  // Initializing serial port for debugging purposes
    Serial.begin(115200);
  while (!Serial);
  Serial.println(F("BME680 test"));
   if (!bme.begin()) {
    Serial.println("Could not find a valid BME680 sensor, check wiring!");
    while (1);
  }

  // Set up oversampling and filter initialization
  bme.setTemperatureOversampling(BME680_OS_8X);
  bme.setHumidityOversampling(BME680_OS_2X);
  bme.setPressureOversampling(BME680_OS_4X);
  bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
  bme.setGasHeater(320, 150); // 320*C for 150 ms
  
  WiFiManager wifiManager;
  //wifiManager.startConfigPortal("Mask1");
  wifiManager.autoConnect("Mask1");
  Serial.println("Connected.");
  server.begin();
}

// runs over and over again
void loop() {
  // Listening for new clients
  WiFiClient client = server.available();
  bme.performReading();
  getSensorReadings();
  if (client) {
    Serial.println("New client");
    // boolean to locate when the http request ends
    boolean blank_line = true;
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        
        if (c == '\n' && blank_line) {
            client.println("HTTP/1.1 200 OK");
            client.println("Content-Type: text/html");
            client.println("Connection: close");
            client.println();
            client.println("<!DOCTYPE HTML>");
            client.println("<html>");
            client.println("<head></head><body><h1>ESP8266 - BME680</h1><h3>Temperature(C): ");
            client.println(temperature);
            client.println("</h3><h3>Pressure(Pa): ");
            client.println(pressure);
            client.println("</h3><h3>Humidity(%): ");
            client.println(humidity);
            client.println("</h3><h3>Gas Resistance(K ohm): ");
            client.println(gasResistance);
            client.println("</h3><h3>");
            client.println("</body></html>");     
            break;
        }
        if (c == '\n') {
        
                  // when starts reading a new line
          blank_line = true;
        }
        else if (c != '\r') {
          // when finds a character on the current line
          blank_line = false;
        }
      }
    }  
    //delay(0.5);
    client.stop();
    Serial.println("Client disconnected.");
  }
}
